#!/usr/bin/env node
import T from "node:child_process";
import m from "node:fs";
import W from "node:https";
import S from "node:path";
function z() {
  if (!process.env.npm_config_user_agent) return;
  const e = process.env.npm_config_user_agent.split(" ")[0], t = e.substring(0, e.lastIndexOf("/"));
  return t === "npminstall" ? "cnpm" : t;
}
const M = {
  npm: "install",
  yarn: "add",
  pnpm: "install",
  bun: "install",
  cnpm: "install"
}, L = (e) => ({
  npm: `run ${e}`,
  yarn: `${e}`,
  pnpm: `run ${e}`,
  bun: `run ${e}`,
  cnpm: `run ${e}`
}), U = {
  npm: "npx",
  yarn: "yarn",
  pnpm: "pnpm",
  bun: "bunx",
  cnpm: "cnpm"
}, J = `import { defineConfig } from "vite";

const kaplayCongrats = () => {
    return {
        name: "vite-plugin-kaplay-hello",
        buildEnd() {
            const line =
                "---------------------------------------------------------";
            const msg = \`ðŸ¦– Awesome pal! Send your game to us:\\n\\nðŸ’Ž Discord: https://discord.com/invite/aQ6RuQm3TF \\nðŸ’– Donate to KAPLAY: https://opencollective.com/kaplay\\n\\ (you can disable this msg on vite.config)\`;

            process.stdout.write(\`\\n\${line}\\n\${msg}\\n\${line}\\n\`);
        },
    };
};

export default defineConfig({
    // index.html out file will start with a relative path for script
    base: "./",
    server: {
        port: 3001,
    },
    build: {
        // disable this for low bundle sizes
        sourcemap: true,
        rollupOptions: {
            output: {
                manualChunks: {
                    kaplay: ["kaplay"],
                },
            },
        },
    },
    plugins: [
        // Disable messages removing this line
        kaplayCongrats(),
    ],
});
`, B = `import kaplay from "kaplay";
// import "kaplay/global"; // uncomment if you want to use without the k. prefix

const k = kaplay();

k.loadRoot("./"); // A good idea for Itch.io publishing later
k.loadSprite("bean", "sprites/bean.png");

k.add([k.pos(120, 80), k.sprite("bean")]);

k.onClick(() => k.addKaboom(k.mousePos()));
`, K = "3.1.0", o = z() ?? "npm", j = U[o], C = M[o], Y = L("dev")[o], y = "https://raw.githubusercontent.com/marklovers/kaplay/master", q = process.cwd(), p = (e, t) => `\x1B[${e}m${t}\x1B[0m`, D = /^win/.test(process.platform), g = (e, t) => {
  console.error(p(31, e)), t && console.error(`
` + x), process.exit(1);
}, d = (e) => console.log(p(33, e)), v = (e) => {
  i.verbose && console.log(p(90, e));
}, E = (e) => D ? `"${e}"` : e, P = [
  { long: "help", short: "h", desc: "Print this message" },
  { long: "typescript", short: "t", desc: "Use TypeScript" },
  {
    long: "desktop",
    short: "d",
    desc: "Enable packaging for desktop with tauri"
  },
  {
    long: "example",
    short: "e",
    value: "name",
    desc: "Start from an example listed on play.kaplayjs.com"
  },
  {
    long: "spaces",
    short: "s",
    value: "level",
    desc: "Use spaces instead of tabs for generated files"
  },
  {
    long: "version",
    short: "v",
    value: "label",
    desc: "Use a specific kaplay version (default latest)"
  },
  {
    long: "verbose",
    short: "verb",
    desc: "Print additional information"
  }
], O = P.map((e) => ({
  usage: `${e.short ? `-${e.short},` : "   "} --${e.long}${e.value ? ` <${e.value}>` : ""}`,
  desc: e.desc
})), Q = O.reduce(
  (e, t) => t.usage.length > e ? t.usage.length : e,
  0
), x = `
create-kaplay v${K} ${o}

${p(32, "USAGE ðŸ¦–")}

  $ create-kaplay [OPTIONS] <dir>

${p(32, "OPTIONS")}

  ${O.map(
  (e) => `${p(32, e.usage)} ${" ".repeat(Q - e.usage.length)} ${e.desc}`
).join(`
  `)}

${p(32, "EXAMPLE")}
  ${p(90, "# quick start with default config")}
  $ create-kaplay my-game

  ${p(90, "# calling with options")}
  $ create-kaplay --typescript --spaces 4 --desktop --example burp my-game
`.trim(), i = {}, _ = [];
e: for (let e = 2; e < process.argv.length; e++) {
  const t = process.argv[e];
  if (t.startsWith("-")) {
    for (const n of P)
      if (t === `--${n.long}` || t === `-${n.short}`) {
        if (n.value) {
          const s = process.argv[++e];
          s || g(`Expected value after ${t}`), i[n.long] = s;
        } else
          i[n.long] = !0;
        continue e;
      }
    g(`Unknown option "${t}"`, !0);
  } else
    _.push(t);
}
i.help && (console.log(x), process.exit());
const a = _[0];
a || (console.log(x), process.exit());
m.existsSync(a) && g(`Directory "${a}" already exists!`);
const b = (e) => JSON.stringify(e, null, i.spaces ? 4 : "	"), f = i.typescript, u = i.desktop, h = f ? "ts" : "js", w = async (e, t) => new Promise((n) => {
  const s = m.createWriteStream(t);
  W.get(e, (r) => {
    r.pipe(s), s.on("finish", () => {
      s.close(), n();
    });
  });
}), $ = async (e, t, n) => (v(`- running ${e} ${t.join(" ")}`), new Promise((s) => {
  const r = T.spawn(e, t, {
    ...n,
    ...D ? { shell: !0 } : {}
  });
  v(`- spawned process ${r.pid} ${e} ${t.join(" ")}`), r.on("exit", s), r.on("error", g);
})), G = (e, t) => {
  const n = JSON.parse(m.readFileSync(e, "utf8"));
  m.writeFileSync(e, b(t(n)));
};
let k = B;
const R = /load(Sprite|Sound|Shader|Aseprite|Font|BitmapFont)\("([^"]+)",\s*"([^"]+)"\)/gm;
if (i.example) {
  d(`- fetching example "${i.example}"`);
  const e = await fetch(`${y}/examples/${i.example}.js`), t = await e.text();
  e.ok || g(
    `Example "${i.example}" not found. Check https://github.com/marklovers/kaplay/tree/master/examples for available examples`
  ), k = `import kaplay from "kaplay"
import "kaplay/global";

` + t;
}
const A = [];
for (const e of k.matchAll(R)) {
  const [t, n, s, r] = e;
  r.startsWith("/sprites") || A.includes(r.split("/")[2]) || A.push(r.split("/")[2]);
}
const F = [`kaplay@${i.version ?? "latest"}`], I = [
  "vite@latest",
  "@types/node@latest",
  ...f ? ["typescript@latest"] : [],
  ...u ? ["@tauri-apps/cli@1"] : []
], c = (e, t) => ({
  type: "file",
  name: e,
  content: t.trim()
}), l = (e, t) => ({
  type: "dir",
  name: e,
  items: t
}), N = (e) => {
  if (e.type === "dir")
    m.mkdirSync(e.name), process.chdir(e.name), e.items.forEach(N), process.chdir("..");
  else if (e.type === "file") {
    const t = i.spaces ? e.content.replaceAll("	", " ".repeat(i.spaces)) : e.content, n = process.cwd().replace(new RegExp(`^${q}/`), "");
    d(`- creating ${n}/${e.name}`), m.writeFileSync(e.name, t);
  }
};
N(
  l(a, [
    c(
      "package.json",
      b({
        name: a,
        type: "module",
        scripts: {
          build: "vite build",
          dev: "vite",
          preview: "vite preview",
          zip: `${o} run build && mkdir -p dist && zip -r dist/game.zip dist -x "**/.DS_Store"`,
          ...f ? {
            check: "tsc"
          } : {},
          ...u ? {
            "dev:desktop": "tauri dev",
            "build:desktop": "tauri build"
          } : {}
        }
      })
    ),
    c(`vite.config.${h}`, J),
    c(
      "index.html",
      `
<!DOCTYPE html>
<html>
<head>
<title>${a}</title>
</head>
<body style="overflow:hidden">
<script src="src/main.${h}" type="module"><\/script>
</body>
</html>
    `
    ),
    l("public", [
      l("sprites", []),
      // TODO: Create this folders if only needed
      l("examples", [
        l("sprites", []),
        l("sounds", []),
        l("fonts", []),
        l("shaders", [])
      ])
    ]),
    l("src", [c(`main.${h}`, k)]),
    c("README.md", ""),
    ...f ? [
      c(
        "tsconfig.json",
        b({
          compilerOptions: {
            noEmit: !0,
            target: "esnext",
            moduleResolution: "node"
          },
          include: ["src/**/*.ts"]
        })
      )
    ] : [],
    c(
      ".gitignore",
      `
node_modules/
dist/
.DS_Store
${u ? "src-tauri/target/" : ""}
	`
    ),
    c(
      "README.md",
      `
# Folder structure

- \`src\` - source code for your kaplay project
- \`dist\` - distribution folder, contains your index.html, built js bundle and static assets
${u ? "- `src-tauri` - tauri project folder, contains tauri config file, icons, rust source if you need native code" : ""}

## Development

\`\`\`sh
$ ${o} run dev
\`\`\`

will start a dev server at http://localhost:8000

## Distribution

\`\`\`sh
$ ${o} run build
\`\`\`

will build your js files into \`dist/\`

\`\`\`sh
$ ${o} run zip
\`\`\`

will build your game and package into a .zip file, you can upload to your server or itch.io / newground etc.

${u ? `
## Desktop

This project uses tauri for desktop builds, you have to have \`rust\` installed on your system for desktop to work, check out [tauri setup guide](https://tauri.app/v1/guides/getting-started/prerequisites/)

For tauri native APIs look [here](https://tauri.app/v1/api/js/)

\`\`\`sh
$ ${o} run dev:desktop
\`\`\`

will start the dev server and a native window that servers content from that dev server

\`\`\`sh
$ ${o} run build:desktop
\`\`\`

will create distributable native app package
` : ""}
	`
    )
  ])
);
process.chdir(a);
d("- downloading example sprites");
for (const e of k.matchAll(R)) {
  const [, t, n, s] = e;
  s.startsWith("sprites") || s.startsWith("/sprites") || s.startsWith("./sprites") ? (d(`- downloading sprite "${n}"`), await w(`${y}/assets/${s}`, S.join("public", s))) : (d(`- downloading ${t.toLowerCase()} "${n}"`), await w(
    `${y}/examples/${s}`,
    S.join("public", s)
  ));
}
d(`- installing packages ${F.map((e) => `"${e}"`).join(", ")}`);
await $(o, [C, ...F], {
  stdio: ["inherit", "ignore", "inherit"]
});
d(
  `- installing dev packages ${I.map((e) => `"${e}"`).join(", ")}`
);
await $(o, [C, "-D", ...I], {
  stdio: ["inherit", "ignore", "inherit"]
});
u && (d("- starting tauri project for desktop build"), v(`- running ${o} tauri init`), await $(
  j,
  [
    "tauri",
    "init",
    "--app-name",
    a,
    "--window-title",
    a,
    "--dist-dir",
    "../dist",
    "--dev-path",
    "http://localhost:8000",
    "--before-dev-command",
    E(`${o} run dev`),
    "--before-build-command",
    E(`${o} run build`),
    "--ci"
  ],
  { stdio: "inherit" }
), await w(
  "https://raw.githubusercontent.com/marklovers/kaplay/master/assets/sprites/k.png",
  "public/icon.png"
), await $(j, ["tauri", "icon", "public/icon.png"], {
  stdio: "inherit"
}), G("src-tauri/tauri.conf.json", (e) => (e.tauri.bundle.identifier = "com.kaplay.dev", e)));
console.log("");
console.log(
  `
Success! Now run:

$ cd ${a}
$ ${o} ${Y}

and start editing src/main.${h}! ðŸ¦–
--------------------------------------------
Consider donating to KAPLAY:
ðŸ’– https://opencollective.com/kaplay
`.trim()
);
